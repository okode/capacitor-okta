{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from \"@capacitor/core\";\n\nexport interface OktaPlugin {\n  signIn(options?: { signInInBrowser?: boolean, document?: string, emptyDocument?: boolean, params?: Record<string, string> }): Promise<{ token: string }>;\n  signOut(options?: { signOutOfBrowser?: boolean, resetBiometric?: boolean }): Promise<void>;\n  register(params?: Record<string, string>): Promise<{ token: string }>;\n  recoveryPassword(params?: Record<string, string>): Promise<{ token: string }>;\n  enableBiometric(): Promise<BiometricState>;\n  disableBiometric(): Promise<BiometricState>;\n  resetBiometric(): Promise<BiometricState>;\n  getBiometricStatus(): Promise<BiometricState>;\n  configure(config: OktaConfig): Promise<void>;\n  addListener(eventName: 'error', listenerFunc: (data: OktaError) => void): PluginListenerHandle;\n}\n\nexport interface OktaError {\n  error: string;\n  message: string;\n  code: string;\n}\n\nexport interface BiometricState {\n  isBiometricAvailable: boolean;\n  isBiometricEnabled: boolean\n}\n\nexport interface OktaConfig {\n  clientId: string;\n  uri: string;\n  scopes: string;\n  endSessionUri: string;\n  redirectUri: string\n}\n"]}