{
  "api": {
    "name": "OktaPlugin",
    "slug": "oktaplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "signIn",
        "signature": "(options: { params?: Record<string, string>; biometric?: boolean; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ params?: Record<string, string> | undefined; biometric?: boolean | undefined; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "Record"
        ],
        "slug": "signin"
      },
      {
        "name": "signOut",
        "signature": "() => Promise<{ value: number; }>",
        "parameters": [],
        "returns": "Promise<{ value: number; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "signout"
      },
      {
        "name": "getUser",
        "signature": "() => Promise<{ [key: string]: any; }>",
        "parameters": [],
        "returns": "Promise<{ [key: string]: any; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getuser"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'initSuccess', listenerFunc: (data: AuthStateDetails) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'initSuccess'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(data: AuthStateDetails) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "AuthStateDetails"
        ],
        "slug": "addlistenerinitsuccess"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'initError', listenerFunc: (error: { description?: string; }) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'initError'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(error: { description?: string | undefined; }) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlisteneriniterror"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'authState', listenerFunc: (data: AuthStateDetails) => void) => PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'authState'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(data: AuthStateDetails) => void"
          }
        ],
        "returns": "PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "AuthStateDetails"
        ],
        "slug": "addlistenerauthstate"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    },
    {
      "name": "AuthStateDetails",
      "slug": "authstatedetails",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "accessToken",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "isBiometricSupported",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "Record",
      "slug": "record",
      "docs": "Construct a type with a set of properties K of type T",
      "types": [
        {
          "text": "{\r\n    [P in K]: T;\r\n}",
          "complexTypes": [
            "K",
            "T"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": []
}